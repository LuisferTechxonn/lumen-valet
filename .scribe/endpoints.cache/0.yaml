## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Books management Scribe'
description: |-

  SCRIBE Documentation. APIs for managing Books. Aqu칤 se puede poner todo el texto que se requiera.

  Por ejemplo, esto puede ser otro p치rrafo.

  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ... cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ... Parte del libro 'Finibus Bonorum et Malorum' de Cicer칩n.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/books
    metadata:
      title: 'GET Devuelve Todos los Libros ACTIVOS.'
      description: 'Se puede dejar que el sistema devuelva autom치ticamente la respuesta (teniendo Factory y Transformer lo hace) o realizar un json como respuesta'
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "data": [
                  {
                      "id": 1,
                      "title": "T칤tulo del Libro",
                      "author": "Autor del Libro",
                      "pages": 123,
                      "created_at": "2021-06-24",
                      "links": {
                          "status": "created",
                          "url": "\/api\/books\/1"
                      }
                  },
                  {
                      "id": 5,
                      "title": "Asperiores cumque dolor explicabo temporibus fuga.",
                      "author": "Prof. Alexandro Zieme",
                      "pages": 186,
                      "created_at": "2021-06-24",
                      "links": {
                          "status": "created",
                          "url": "\/api\/books\/5"
                      }
                  }
              ]
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/books
    metadata:
      title: 'POST. Crea un libro y lo introduce si es correcto en la colecci칩n'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Nombre o t칤tulo del libro. Debe ser 칰nico en todo el sistema.'
        required: true
        example: 'Libro de Pruebas'
        type: string
      author:
        name: author
        description: 'Autor del libro.'
        required: true
        example: 'Paul Bettenan'
        type: string
      pages:
        name: pages
        description: 'N칰mero de p치ginas del libro'
        required: true
        example: 13
        type: integer
    responses:
      -
        status: 200
        content: |
          {
              "data": {
                  "id": 83,
                  "title": "Libro de Pruebas",
                  "author": "Paul Bettenan",
                  "pages": 20,
                  "created_at": "2021-06-25",
                  "links": {
                      "status": "created",
                      "url": "\/api\/books\/83"
                  }
              }
          }
        headers: []
        description: '200'
      -
        status: 422
        content: |
          {
              "name": [
                "The name has already been taken."
              ],
              "author": [
                "The author field is required."
              ]
            }
        headers: []
        description: '422, Unprocessable Entity'
    responseFields:
      name:
        name: name
        description: 'campo contiene los errores generados. en este caso, el campo name debe ser 칰nic, Pueden existir tantos campos como errores generados, donde la clave es el campo de entrada con error'
        type: ''
  -
    httpMethods:
      - GET
    uri: 'api/books/{book_id}'
    metadata:
      title: 'GET Devuelve los datos de un libro existente.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: 'Identificador del libro a devolver'
        required: true
        example: 12
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "data": {
                  "id": 83,
                  "title": "Libro de Pruebas",
                  "author": "Paul Bettenan",
                  "pages": 20,
                  "created_at": "2021-06-25",
                  "links": {
                      "status": "created",
                      "url": "\/api\/books\/83"
                  }
              }
          }
        headers: []
        description: '200, Found'
      -
        status: 404
        content: |
          {
              "status": "ERROR",
              "error": "404 Not Found"
            }
        headers: []
        description: '404, Not Found'
    responseFields:
      status:
        name: status
        description: 'Status of the Response'
        type: ''
      error:
        name: error
        description: 'Descripci칩n del error'
        type: ''
  -
    httpMethods:
      - PUT
    uri: 'api/books/{book_id}'
    metadata:
      title: 'PUT. Modificaci칩n de un libro. Debe recibir TODOS los par치metros del objeto Libro.'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: 'Identificador del libro a modificar'
        required: true
        example: 1
        type: integer
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Nombre del libro'
        required: true
        example: molestiae
        type: string
      author:
        name: author
        description: 'Autor del libro'
        required: true
        example: animi
        type: string
      pages:
        name: pages
        description: 'N칰nero de p치ginas del libro'
        required: true
        example: 169
        type: integer
    responses:
      -
        status: 200
        content: |
          {
              "data": {
                  "id": 83,
                  "title": "Libro de Pruebas",
                  "author": "Paul Bettenan",
                  "pages": 20,
                  "created_at": "2021-06-25",
                  "links": {
                      "status": "created",
                      "url": "\/api\/books\/83"
                  }
              }
          }
        headers: []
        description: '200, Modified'
      -
        status: 404
        content: |
          {
              "status": "ERROR",
              "error": "404 Not Found"
            }
        headers: []
        description: '404, Not Found'
      -
        status: 422
        content: |
          {
              "name": [
                "The name has already been taken."
              ],
              "author": [
                "The author field is required."
              ]
            }
        headers: []
        description: '422, Unprocessable Entity'
    responseFields:
      status:
        name: status
        description: 'Status of the Response'
        type: ''
      error:
        name: error
        description: 'Descripci칩n del error'
        type: ''
  -
    httpMethods:
      - PATCH
    uri: 'api/books/{book_id}'
    metadata:
      title: 'PATCH. Modificaci칩n de parte de un libro. Debe recibir al menos 1 de los par치metros de entrada'
      description: '<aside class="notice">Al menos debes mandar 1 par치metro del Body 游땟</aside>'
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: 'Identificador del libro a modificar'
        required: true
        example: 1
        type: integer
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Nombre del libro'
        required: false
        example: harum
        type: string
      author:
        name: author
        description: 'Autor del libro'
        required: false
        example: aut
        type: string
      pages:
        name: pages
        description: 'N칰nero de p치ginas del libro'
        required: false
        example: 180
        type: integer
    responses:
      -
        status: 200
        content: |
          {
              "data": {
                  "id": 83,
                  "title": "Libro de Pruebas",
                  "author": "Paul Bettenan",
                  "pages": 20,
                  "created_at": "2021-06-25",
                  "links": {
                      "status": "created",
                      "url": "\/api\/books\/83"
                  }
              }
          }
        headers: []
        description: '200, Modified'
      -
        status: 404
        content: |
          {
              "status": "ERROR",
              "error": "404 Not Found"
            }
        headers: []
        description: '404, Not Found'
      -
        status: 422
        content: |
          {
              "name": [
                "The name has already been taken."
              ],
              "author": [
                "The author field is required."
              ]
            }
        headers: []
        description: '422, Unprocessable Entity'
    responseFields:
      status:
        name: status
        description: 'Status of the Response'
        type: ''
      error:
        name: error
        description: 'Descripci칩n del error'
        type: ''
  -
    httpMethods:
      - DELETE
    uri: 'api/books/{book_id}'
    metadata:
      title: 'DELETE. Elimina (soft delete) un libro de la colecci칩n'
      description: ''
      authenticated: false
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      book_id:
        name: book_id
        description: 'Id del libro a eliminar'
        required: true
        example: 3
        type: integer
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "data": [
                  {
                      "id": 1,
                      "title": "T칤tulo del Libro",
                      "author": "Autor del Libro",
                      "pages": 123,
                      "created_at": "2021-06-24",
                      "links": {
                          "status": "created",
                          "url": "\/api\/books\/1"
                      }
                  },
                  {
                      "id": 5,
                      "title": "Asperiores cumque dolor explicabo temporibus fuga.",
                      "author": "Prof. Alexandro Zieme",
                      "pages": 186,
                      "created_at": "2021-06-24",
                      "links": {
                          "status": "created",
                          "url": "\/api\/books\/5"
                      }
                  }
              ]
          }
        headers: []
        description: '200'
      -
        status: 200
        content: |
          {
              "data": [
                  {
                      "id": 1,
                      "title": "T칤tulo del Libro",
                      "author": "Autor del Libro",
                      "pages": 123,
                      "created_at": "2021-06-24",
                      "links": {
                          "status": "created",
                          "url": "\/api\/books\/1"
                      }
                  },
                  {
                      "id": 5,
                      "title": "Asperiores cumque dolor explicabo temporibus fuga.",
                      "author": "Prof. Alexandro Zieme",
                      "pages": 186,
                      "created_at": "2021-06-24",
                      "links": {
                          "status": "created",
                          "url": "\/api\/books\/5"
                      }
                  }
              ]
          }
        headers: []
        description: '200, Removed'
      -
        status: 404
        content: |
          {
              "status": "ERROR",
              "error": "404 Not Found"
            }
        headers: []
        description: '404, Not Found'
    responseFields:
      data:
        name: data
        description: 'que contendr치 la colecci칩n de los libros'
        type: array
      id:
        name: id
        description: 'Identificador del libro'
        type: integer
      title:
        name: title
        description: 'T칤tulo del libro'
        type: string
      author:
        name: author
        description: 'Autor del libro'
        type: string
      pages:
        name: pages
        description: 'N칰mero de p치ginas'
        type: integer
      created_at:
        name: created_at
        description: 'date Fecha de creaci칩n'
        type: string
      links:
        name: links
        description: 'Objeto que contendr치 los campos status y url'
        type: object
      status:
        name: status
        description: 'Status of the Response'
        type: ''
      url:
        name: url
        description: 'Url de acceso a la informaci칤on del libro'
        type: ''
      error:
        name: error
        description: 'Descripci칩n del error'
        type: ''
